// <auto-generated />
using System;
using Lab_06.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab_06.Migrations
{
    [DbContext(typeof(NotePlannerDbContext))]
    [Migration("20231211100231_ShushakaStart")]
    partial class ShushakaStart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab_06.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NoteTagId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NoteId");

                    b.HasIndex("NoteStatusId");

                    b.HasIndex("NoteTagId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Lab_06.Models.NoteStatus", b =>
                {
                    b.Property<int>("NoteStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteStatusId"));

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteStatusId");

                    b.ToTable("NoteStatuses");
                });

            modelBuilder.Entity("Lab_06.Models.NoteTag", b =>
                {
                    b.Property<int>("NoteTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteTagId"));

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteTagId");

                    b.ToTable("NoteTags");
                });

            modelBuilder.Entity("Lab_06.Models.SubNote", b =>
                {
                    b.Property<int>("SubNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubNoteId"));

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("SubNoteDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubNoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("SubNotes");
                });

            modelBuilder.Entity("Lab_06.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Lab_06.Models.Note", b =>
                {
                    b.HasOne("Lab_06.Models.NoteStatus", "NoteStatus")
                        .WithMany("Notes")
                        .HasForeignKey("NoteStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab_06.Models.NoteTag", "NoteTag")
                        .WithMany("Notes")
                        .HasForeignKey("NoteTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab_06.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteStatus");

                    b.Navigation("NoteTag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lab_06.Models.SubNote", b =>
                {
                    b.HasOne("Lab_06.Models.Note", "Note")
                        .WithMany("SubNotes")
                        .HasForeignKey("NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Lab_06.Models.Note", b =>
                {
                    b.Navigation("SubNotes");
                });

            modelBuilder.Entity("Lab_06.Models.NoteStatus", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Lab_06.Models.NoteTag", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Lab_06.Models.User", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
